name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: doctor-note
  TAG: be-latest

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

      - name: Run unit tests
        run: yarn test

      - name: Run e2e tests (This should include the .env file)
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          yarn test:e2e

  build:
    # needs: test
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern=be-v{{version}}
            type=raw,value=${{env.TAG}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          CONTAINER_NAME: ${{ env.IMAGE_NAME }}-${{ env.TAG }}
          IMAGE_TAG: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{env.TAG}}
          ENV_FILE: ~/env/be.env
          PORT: 8080
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
            # Ensure user is in docker group
            groups | grep -q docker || { echo "❌ Error: user not in docker group"; exit 1; }

            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin \
              || { echo "❌ Docker login failed"; exit 1; }

            # Pull the latest image
            docker pull $IMAGE_TAG \
              || { echo "❌ Docker pull failed"; exit 1; }

            # Stop and remove existing container
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # Run new container
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              -p $PORT:3000 \
              --env-file $ENV_FILE \
              $IMAGE_TAG \
              || { echo "❌ Docker run failed"; exit 1; }

            # Clean up old images
            docker image prune -f

            # Verify deployment
            sleep 10
            docker ps | grep $CONTAINER_NAME \
              && echo "✅ Deployment successful!" || echo "❌ Deployment failed!"
          EOF

      - name: Cleanup SSH key
        if: always() # Run even if deploy fails
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f ~/.ssh/known_hosts
